(()=>{"use strict";var e,r=.005;function t(e,r){return void 0===r&&(r=200),Math.abs(e)%r}function n(e){return void 0===e&&(e=23),Math.trunc(Math.random()*e)}function a(e){return[-e[0],-e[1]]}function u(e){return[+!e[0],+!e[1]]}function c(e){return[+!-e[0],+!-e[1]]}!function(e){e[e.PASS=0]="PASS",e[e.MOVE_F=1]="MOVE_F",e[e.MOVE_B=2]="MOVE_B",e[e.MOVE_L=3]="MOVE_L",e[e.MOVE_R=4]="MOVE_R",e[e.ABSORB=5]="ABSORB",e[e.INC_PR=6]="INC_PR",e[e.INC_DU=7]="INC_DU",e[e.INC_AG=8]="INC_AG",e[e.SHARE=9]="SHARE",e[e.IF_TRUE=10]="IF_TRUE",e[e.IF_NOT=11]="IF_NOT",e[e.IF_MORE=12]="IF_MORE",e[e.IF_LESS=13]="IF_LESS",e[e.IF_EQU=14]="IF_EQU",e[e.WHILE=15]="WHILE",e[e.GO_TO=16]="GO_TO",e[e.LOOK_F=17]="LOOK_F",e[e.LOOK_B=18]="LOOK_B",e[e.LOOK_L=19]="LOOK_L",e[e.LOOK_R=20]="LOOK_R",e[e.ROT_L=21]="ROT_L",e[e.ROT_R=22]="ROT_R",e[e.GT_LIGHT=23]="GT_LIGHT",e[e.SHARE_F=24]="SHARE_F",e[e.SHARE_B=25]="SHARE_B",e[e.SHARE_L=26]="SHARE_L",e[e.SHARE_R=27]="SHARE_R",e[e.ATT_F=28]="ATT_F",e[e.ATT_B=29]="ATT_B",e[e.ATT_L=30]="ATT_L",e[e.ATT_R=31]="ATT_R"}(e||(e={}));var o=function(){function r(r,t){this.genome_step=0,this.result_value=0,this.lock=!1,this.direction=[1,0],this.alive=!0,this.immortal=!1,this._durablity=0,this._agro=0,this.protection=1,this.enegry=50,this.age=0,r instanceof Array?this.genome=r:(this.genome=r.genome.map((function(e){return Math.random()<t?n():e})),Math.random()<t?this.genome.push(n()):Math.random()>1-t&&delete this.genome[this.genome.length-1]),this._color=function(r){for(var t=[127,127,127],n=0;n<r.length;n++)switch(r[n]){case e.PASS:break;case e.MOVE_F:case e.MOVE_B:case e.MOVE_L:case e.MOVE_R:t[0]+=150;break;case e.ABSORB:t[1]+=255;break;case e.INC_PR:t[2]+=255;break;case e.INC_DU:t[1]+=180,t[2]+=180;break;case e.INC_AG:t[0]+=255;break;case e.SHARE:t[0]+=180,t[1]+=180;break;case e.IF_TRUE:t.forEach((function(e,r){return t[r]+=255}))}return t[0]=Math.trunc(t[0]/r.length),t[1]=Math.trunc(t[1]/r.length),t[2]=Math.trunc(t[2]/r.length),t}(this.genome)}return Object.defineProperty(r.prototype,"durablity",{get:function(){return this._durablity},set:function(e){this._durablity=e<0?0:e<255?e:255},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"agro",{get:function(){return this._agro},set:function(e){this._agro=e<255?e:255},enumerable:!1,configurable:!0}),Object.defineProperty(r.prototype,"color",{get:function(){return this.alive?this._color:[0,0,0]},enumerable:!1,configurable:!0}),r.prototype.step=function(){return this.lock?(this.lock=!1,e.PASS):(this.agro>0&&(this.agro-=1),this.agro<0&&(this.agro=0),this.enegry-=5,this.enegry<0&&(this.alive=!1),this.alive||this.immortal?(this.age++,this.genome_step=this.genome_step%this.genome.length,this.genome[this.genome_step++]):(this.durablity-=2,this.durablity<=0?-1:e.PASS))},r}(),i=function(){function e(e,r){this.creature=r,this.lightLevel=e}return e.prototype.tick=function(){if(this.creature)return this.creature.step()},Object.defineProperty(e.prototype,"color",{get:function(){var e=this.lightLevel;return this.creature?"rgba("+this.creature.color.join(", ")+", 1)":"rgba(".concat(e,", ").concat(e,", ").concat(e,", 1)")},enumerable:!1,configurable:!0}),e}();function s(){for(var e=new Array(5),r=0;r<e.length;r++)e[r]=n();return new o(e,0)}function _(e){void 0===e&&(e=1e3);var r=new o([0],0);return r.alive=!1,r.immortal=!0,r}function l(e,r,t){return void 0===t&&(t=!1),void 0===r?0:e.creature.lock?Number(e.creature.lock=!1):(e.creature.lock=t,e.creature.durablity-=3,r.creature?r.creature.immortal?0:e.creature.agro<=r.creature.durablity?(r.creature.durablity-=1*e.creature.agro/r.creature.protection,e.creature.enegry+=1*e.creature.agro/r.creature.protection*1,1):(r.creature.alive&&(e.creature.enegry+=1*r.creature.enegry),e.creature.enegry+=1*r.creature.durablity,delete r.creature,r.creature=e.creature,e.creature=null,1):(r.creature=e.creature,e.creature=null,1))}function g(e,r){if(!r.creature)return 0;for(var t=0;t<r.creature.genome.length;t++)Math.abs(r.creature.genome[t]-e.creature.genome[t])}function h(e,r,n,a){return e[t(n+r[0])][t(a+r[1])]}function f(n,i,s,_){var O=n.tick(),m=n.creature.direction;if(O)switch(n.creature&&n.creature.enegry>50&&function(e,n,a,u){n[a][t(u-1)].creature?n[a][t(u+1)].creature?n[t(a-1)][u].creature?n[t(a+1)][u].creature||(n[t(a+1)][u].creature=new o(e.creature,r),e.creature.enegry-=50):(n[t(a-1)][u].creature=new o(e.creature,r),e.creature.enegry-=50):(n[a][t(u+1)].creature=new o(e.creature,r),e.creature.enegry-=50):(n[a][t(u-1)].creature=new o(e.creature,r),e.creature.enegry-=50)}(n,i,s,_),O){case-1:return delete n.creature;case e.ABSORB:return function(e){return e.creature.enegry+=.1*e.lightLevel,.1*e.lightLevel}(n);case e.MOVE_F:return l(n,h(i,m,s,_));case e.MOVE_B:return l(n,h(i,a(m),s,_),!0);case e.MOVE_L:return l(n,h(i,c(m),s,_));case e.MOVE_R:return l(n,h(i,u(m),s,_),!0);case e.INC_AG:return function(e,r){return e.creature.enegry>10?(e.creature.enegry-=10,e.creature.agro+=10,10):0}(n);case e.INC_PR:return function(e,r){return e.creature.enegry>10?(e.creature.enegry-=10,e.creature.protection+=1,1):0}(n);case e.INC_DU:return function(e,r){return e.creature.enegry>10?(e.creature.enegry-=10,e.creature.durablity+=5,5):0}(n);case e.SHARE:return function(e,r,n,a){var u=0;return r[n][t(a-1)].creature&&(r[n][t(a-1)].creature.enegry+=2,e.creature.enegry-=2,u+=2),r[n][t(a+1)].creature&&(r[n][t(a+1)].creature.enegry+=2,e.creature.enegry-=2,u+=2),r[t(n-1)][a].creature&&(r[t(n-1)][a].creature.enegry+=2,e.creature.enegry-=2,u+=2),r[t(n+1)][a].creature&&(r[t(n+1)][a].creature.enegry+=2,e.creature.enegry-=2,u+=2),u}(n,i,s,_);case e.IF_TRUE:return function(e){e.creature.result_value&&(e.creature.genome_step+=1),e.creature.result_value}(n),f(n,i,s,_);case e.IF_NOT:return function(e){e.creature.result_value||(e.creature.genome_step+=1),e.creature.result_value}(n),f(n,i,s,_);case e.IF_MORE:return function(e){e.creature.result_value>e.creature.genome[++e.creature.genome_step]&&(e.creature.genome_step+=1),e.creature.result_value}(n),f(n,i,s,_);case e.IF_LESS:case e.IF_EQU:return function(e){e.creature.result_value<e.creature.genome[++e.creature.genome_step]&&(e.creature.genome_step+=1),e.creature.result_value}(n),f(n,i,s,_);case e.WHILE:return 0;case e.GO_TO:return function(e){e.creature.genome_step=e.creature.genome[e.creature.genome_step+1]%e.creature.genome.length,e.creature.genome.length}(n),f(n,i,s,_);case e.LOOK_F:return g(n,h(i,m,s,_));case e.LOOK_B:return g(n,h(i,a(m),s,_));case e.LOOK_L:return g(n,h(i,c(m),s,_));case e.LOOK_R:return g(n,h(i,u(m),s,_));case e.ROT_L:return function(e){return e.creature.direction=c(e.creature.direction),1}(n);case e.ROT_R:return function(e){return e.creature.direction=u(e.creature.direction),1}(n);case e.GT_LIGHT:case e.SHARE_F:case e.SHARE_B:case e.SHARE_L:case e.SHARE_R:case e.ATT_F:case e.ATT_B:case e.ATT_L:case e.ATT_R:return;default:return console.error("Unknown action was found")}}var O=0,m=function(e,r){return 150};document.body.appendChild(function(){var e=document.createElement("canvas");e.height=600,e.width=600;var r=e.getContext("2d");r.imageSmoothingEnabled=!1;var t=function(e){for(var r=new Array(200),t=0;t<r.length;t++){r[t]=new Array(200);for(var n=0;n<r[t].length;n++)0==n||199==n||0==t||199==t?r[t][n]=new i(e(t,n),_()):Math.random()<1?r[t][n]=new i(e(t,n),s()):r[t][n]=new i(e(t,n))}return r}(m);return setInterval((function(){return function(e,r){r.fillStyle="#f00",r.fillRect(0,0,600,600),O++;for(var t=0;t<e.length;t++)for(var n=0;n<e[t].length;n++){var a=e[t][n];a.lightLevel=100*(1+Math.sin(Math.PI/2+O/(100*Math.PI)))+0,a.creature&&(a.creature.result_value=Number(f(a,e,t,n))),r.fillStyle=a.color,r.fillRect(3*t,3*n,3,3)}}(t,r)}),42),setInterval((function(){return console.log(function(e){for(var r=new Map,t=0,n=e;t<n.length;t++)for(var a=0,u=n[t];a<u.length;a++){var c=u[a];if(c.creature){var o=c.creature.genome.join("|");r.get(o)||r.set(o,1),r.set(o,r.get(o)+1)}}var i=[];return r.forEach((function(e,r){i.push([e,r])})),i.sort((function(e,r){return r[0]-e[0]})),i}(t))}),1e4),e}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,